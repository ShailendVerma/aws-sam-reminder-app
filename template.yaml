AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Reminders Serverless App

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Environment:
      Variables:
        STAGE: !Ref Stage
        APP_NAME: !Ref AppName
        STACK_NAME: !Ref 'AWS::StackName'

Parameters: 
  ReminderS3Bucket: 
    Type: String
    Default: shail-reminder-app
    Description: Name of S3 bucket where reminder app functions are stored.
  #Stage of deployment
  Stage:
    Type: String
    AllowedValues:
      - dev
      - prod
    Description: Stage of the deployment
  AppName:
    Type: String
    Description: Name of the App

Resources:
  #SSM Parameters
  #Minimum delay of reminders from current time default 5 mins
  MinDelayParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join [ "", [ "/",!Ref AppName,"/", !Ref Stage, "/min_delay_param" ] ]
      Description: 'Minimum delay of reminder form current time in seconds defaut 2 mins'
      Type: String
      Value: 120

  #Maximum delay of reminders from current times default 1 year 
  MaxDelayParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join [ "", [ "/",!Ref AppName,"/", !Ref Stage, "/max_delay_param" ] ]
      Description: 'Maximum delay of reminders from current time in seconds default 1 year'
      Type: String
      Value: 31557600

  #Maximum number of times a reminder must be retries before marking unacknowledged default 1 
  MaxRetryCountParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join [ "", [ "/",!Ref AppName,"/", !Ref Stage, "/max_retry_count" ] ]
      Description: 'Maximum number of times a reminder must be retries before marking unacknowledged default 1'
      Type: String
      Value: 1

  #DynamoDB Table
  RemindersTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: reminder_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
      KeySchema: 
        - AttributeName: reminder_id
          KeyType: HASH
        - AttributeName: user_id
          KeyType: RANGE
      ProvisionedThroughput: 
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      TableName: !Join 
        - ''
        - - !Ref 'AWS::StackName'
          - '-RemindersTable'

  #Create Reminder Role - allows logging to cloud watch logs and putItem in DynamoDB table defined above
  CreateReminderFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties: 
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: CreateReminderFunctionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
                #log to cloud formation
              - Effect: Allow
                Action:
                  - 'logs:*'
                Resource: 'arn:aws:logs:*:*:*'
                #Insert into Dynamo DB
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                Resource: !Join 
                  - ''
                  - - 'arn:aws:dynamodb:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':table/'
                    - !Ref 'AWS::StackName'
                    - '-RemindersTable'
              #Access SSM get parameters for min delay and max delay
              - Effect: Allow
                Action:
                  - 'ssm:GetParametersByPath'
                Resource: 
                  - !Join ['',['arn:aws:ssm:',!Ref 'AWS::Region',':',!Ref 'AWS::AccountId',':parameter/',!Ref AppName,'/',!Ref Stage,'*']]
                  # Not using exact GetParameters at it requires top level access to the resource 
                  # also not using exact arn as GetParametersByPath requires access to the parent path of the param
                  #- !Join ['',['arn:aws:ssm:',!Ref 'AWS::Region',':',!Ref 'AWS::AccountId',':parameter/',!Ref AppName,'/',!Ref Stage,'/','max_delay_param']]
              #Access to run StepFunction
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !Ref ReminderStateMachine

  #Lambda to insert reminders into dynamo db and trigger the step function to wait
  CreateReminderFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: reminder_app/
      Handler: api_reminder_handler.create_reminder
      Role: !GetAtt 
        - CreateReminderFunctionRole
        - Arn
      Runtime: python3.7
      Environment:
          Variables:
            STEP_FUNCTION_ARN: !Ref ReminderStateMachine
      Events:
        Reminder:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /create
            Method: post

  #Update Reminder Role - allows logging to cloud watch logs and putItem in DynamoDB table defined above
  UpdateReminderFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: UpdateReminderFunctionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
                #log to cloud formation
              - Effect: Allow
                Action:
                  - 'logs:*'
                Resource: 'arn:aws:logs:*:*:*'
                #Insert into Dynamo DB
              - Effect: Allow
                Action:
                  - 'dynamodb:UpdateItem'
                Resource: !Join 
                  - ''
                  - - 'arn:aws:dynamodb:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':table/'
                    - !Ref 'AWS::StackName'
                    - '-RemindersTable'
              #Access SSM get parameters for min delay and max delay
              - Effect: Allow
                Action:
                  - 'ssm:GetParametersByPath'
                Resource: 
                  - !Join ['',['arn:aws:ssm:',!Ref 'AWS::Region',':',!Ref 'AWS::AccountId',':parameter/',!Ref AppName,'/',!Ref Stage,'*']]
                  #- !Join ['',['arn:aws:ssm:',!Ref 'AWS::Region',':',!Ref 'AWS::AccountId',':parameter/',!Ref AppName,'/',!Ref Stage,'/','max_delay_param']]

  #Lambda to update reminders existing in dynamo db
  UpdateReminderFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: reminder_app/
      Handler: api_reminder_handler.update_reminder
      Role: !GetAtt 
        - UpdateReminderFunctionRole
        - Arn
      Runtime: python3.7
      Events:
        Reminder:
          Type: Api 
          Properties:
            Path: /update
            Method: post

  #Delete Reminder Role - allows logging to cloud watch logs and DeleteItem in DynamoDB table defined above
  DeleteReminderFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: DeleteReminderFunctionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
                #log to cloud formation
              - Effect: Allow
                Action:
                  - 'logs:*'
                Resource: 'arn:aws:logs:*:*:*'
                #Insert into Dynamo DB
              - Effect: Allow
                Action:
                  - 'dynamodb:DeleteItem'
                Resource: !Join 
                  - ''
                  - - 'arn:aws:dynamodb:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':table/'
                    - !Ref 'AWS::StackName'
                    - '-RemindersTable'

  #Lambda to Delete reminders existing in dynamo db
  DeleteReminderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: reminder_app/
      Handler: api_reminder_handler.delete_reminder
      Role: !GetAtt 
        - DeleteReminderFunctionRole
        - Arn
      Runtime: python3.7
      Events:
        Reminder:
          Type: Api
          Properties:
            Path: /delete
            Method: get

  #Acknowledge Reminder Role - allows logging to cloud watch logs and putItem in DynamoDB table defined above
  AcknowledgeReminderFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AcknowledgeReminderFunctionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
                #log to cloud formation
              - Effect: Allow
                Action:
                  - 'logs:*'
                Resource: 'arn:aws:logs:*:*:*'
                #Insert into Dynamo DB
              - Effect: Allow
                Action:
                  - 'dynamodb:UpdateItem'
                Resource: !Join 
                  - ''
                  - - 'arn:aws:dynamodb:' 
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':table/'
                    - !Ref 'AWS::StackName'
                    - '-RemindersTable'

  #Lambda to Mark reminder as acknowledged in dynamo db
  AcknowledgeReminderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: reminder_app/
      Handler: api_reminder_handler.ack_reminder
      Role: !GetAtt 
        - AcknowledgeReminderFunctionRole
        - Arn
      Runtime: python3.7
      Events:
        Reminder:
          Type: Api
          Properties:
            Path: /ack
            Method: get

 #List Reminders by User ID Role - allows logging to cloud watch logs and Scan in DynamoDB table defined above
  ListRemindersByUserIDFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: ListRemindersByUserIDFunctionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
                #log to cloud formation
              - Effect: Allow
                Action:
                  - 'logs:*'
                Resource: 'arn:aws:logs:*:*:*'
                #Insert into Dynamo DB
              - Effect: Allow
                Action:
                  - 'dynamodb:Scan'
                Resource: !Join 
                  - ''
                  - - 'arn:aws:dynamodb:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':table/'
                    - !Ref 'AWS::StackName'
                    - '-RemindersTable'

  #Lambda to List reminders by User ID as acknowledged in dynamo db
  ListRemindersByUserIDFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: reminder_app/
      Handler: api_reminder_handler.list_reminders
      Role: !GetAtt 
        - ListRemindersByUserIDFunctionRole
        - Arn
      Runtime: python3.7
      Events:
        Reminder:
          Type: Api
          Properties:
            Path: /list
            Method: get
  
  #List Reminders by User ID Role - allows logging to cloud watch logs and Send SMS or Email
  ExecuteReminderFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: ExecuteReminderFunctionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              #log to cloud formation
              - Effect: Allow
                Action:
                  - 'logs:*'
                Resource: 'arn:aws:logs:*:*:*'
              #Publish to SNS
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource: '*'
              #Send SMS
              - Effect: Allow
                Action:
                  - 'ses:SendEmail'
                Resource: '*'
              #Access SSM get parameters for max retry count
              - Effect: Allow
                Action:
                  - 'ssm:GetParametersByPath'
                Resource: !Join 
                  - ''
                  - - 'arn:aws:ssm:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':parameter/'
                    - !Ref AppName
                    - '/'
                    - !Ref Stage
                    - '*'
              #Insert into/Read from Dynamo DB
              - Effect: Allow
                Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:UpdateItem'
                Resource: !Join 
                  - ''
                  - - 'arn:aws:dynamodb:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':table/'
                    - !Ref 'AWS::StackName'
                    - '-RemindersTable'

  #Lambda to Execute Notifications of reminders by SMS or Email in dynamo db - triggeted by Step function
  ExecuteReminderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: reminder_app/
      Handler: execute_reminder_handler.execute_reminder
      Role: !GetAtt 
        - ExecuteReminderFunctionRole
        - Arn
      Runtime: python3.7
  
  #Reminder State Funtion Role - allows logging to cloud watch logs and invoking the ExecuteReminder function
  ReminderStateMachineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub 'states.${AWS::Region}.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ReminderStateMachinePolicy
          PolicyDocument:
            Statement:
              #log to cloud formation
              - Effect: Allow
                Action:
                  - 'logs:*'
                Resource: 'arn:aws:logs:*:*:*'
              #Invoke ExecuteReminderFunction
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource: !GetAtt 'ExecuteReminderFunction.Arn'
                
  ReminderStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: Reminder-StateMachine
      DefinitionString: 
        !Sub
          - |-
            {
              "StartAt": "wait_to_execute",
              "States": {
              "wait_to_execute": {
                "Type": "Wait",
                "TimestampPath": "$.notify_date_time",
                "Next": "executeNotifyLambda"
                },
                "executeNotifyLambda": {
                  "Type": "Task",
                  "Resource": "${executeReminderArn}",
                  "Parameters":{  
                      "reminder_id":"$.reminder_id"
                  },
                  "Next": "checkSuccess"
                },
                "checkSuccess": {
                  "Type": "Choice",
                  "Choices" : [
                    {
                    "Variable": "$.to_execute",
                    "StringEquals": "true",
                    "Next": "wait_to_execute"
                    }
                  ],
                "Default": "SuccessState"
                },
                "SuccessState": {
                  "Type": "Succeed"
                }
              }
            }
          - {executeReminderArn: !GetAtt [ExecuteReminderFunction, Arn]}
      RoleArn: !GetAtt [ReminderStateMachineRole, Arn]

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  ReminderApi:
    Description: "API Gateway endpoint URL Reminder App for a particular stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
